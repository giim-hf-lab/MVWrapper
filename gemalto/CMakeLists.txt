if (NOT GEMALTO_SUPERDOG_VERSION)
	set(GEMALTO_SUPERDOG_VERSION "2.5")
endif ()

if (NOT GEMALTO_SUPERDOG_BUILD)
	set(GEMALTO_SUPERDOG_BUILD "demo")
endif ()

if (NOT GEMALTO_SUPERDOG_VENDOR_CODE_LABEL)
	set(GEMALTO_SUPERDOG_VENDOR_CODE_LABEL "DEMOMA")
endif ()

if (WIN32)
	if (DEFINED ENV{PROGRAMFILES\(x86\)})
		set(GEMALTO_SUPERDOG_BASE "$ENV{PROGRAMFILES\(x86\)}/Gemalto/SuperDog/${GEMALTO_SUPERDOG_VERSION}")
		set(GEMALTO_SUPERDOG_LICENSING_API_DIR "${GEMALTO_SUPERDOG_BASE}/API/Licensing/C/x64")
		set(GEMALTO_SUPERDOG_LICENSING_API_LIBRARY "${GEMALTO_SUPERDOG_LICENSING_API_DIR}/libdog_windows_x64_${GEMALTO_SUPERDOG_BUILD}.lib")
	elseif (DEFINED ENV{PROGRAMFILES})
		set(GEMALTO_SUPERDOG_BASE "$ENV{PROGRAMFILES}/Gemalto/SuperDog/${GEMALTO_SUPERDOG_VERSION}")
		set(GEMALTO_SUPERDOG_LICENSING_API_DIR "${GEMALTO_SUPERDOG_BASE}/API/Licensing/C/win32")
		set(GEMALTO_SUPERDOG_LICENSING_API_LIBRARY "${GEMALTO_SUPERDOG_LICENSING_API_DIR}/libdog_windows_${GEMALTO_SUPERDOG_BUILD}.lib")
	else ()
		message(FATAL_ERROR "Unknown environment detected.")
	endif ()
else ()
	message(FATAL_ERROR "Gemalto wrapper not supported on ${CMAKE_HOST_SYSTEM_NAME}.")
endif ()

add_library(gemalto_superdog_api STATIC IMPORTED)
set_target_properties(gemalto_superdog_api PROPERTIES
	IMPORTED_LOCATION "${GEMALTO_SUPERDOG_LICENSING_API_LIBRARY}"
	INTERFACE_INCLUDE_DIRECTORIES
		"${GEMALTO_SUPERDOG_LICENSING_API_DIR}"
	INTERFACE_LINK_LIBRARIES
		legacy_stdio_definitions.lib
	SYSTEM TRUE
)

set(GEMALTO_SUPERDOR_VENDOR_CODE_FILE "${GEMALTO_SUPERDOG_BASE}/VendorCodes/${GEMALTO_SUPERDOG_VENDOR_CODE_LABEL}.hvc")
set(GEMALTO_VENDOR_CODE_CPP_DIR "${CMAKE_CURRENT_BINARY_DIR}/vendor_codes")
set(GEMALTO_SUPERDOR_VENDOR_CODE_CPP "${GEMALTO_VENDOR_CODE_CPP_DIR}/superdog.vc")
file(MAKE_DIRECTORY "${GEMALTO_VENDOR_CODE_CPP_DIR}")

file(READ ${GEMALTO_SUPERDOR_VENDOR_CODE_FILE} GEMALTO_SUPERDOR_VENDOR_CODE)
string(CONCAT GEMALTO_SUPERDOR_VENDOR_CODE_CPP_CONTENT
	"static constexpr const char _SUPERDOG_VENDOR_CODE[] = R\"\"\"("
	${GEMALTO_SUPERDOR_VENDOR_CODE}
	")\"\"\"\;"
)
file(GENERATE
	OUTPUT ${GEMALTO_SUPERDOR_VENDOR_CODE_CPP}
	CONTENT ${GEMALTO_SUPERDOR_VENDOR_CODE_CPP_CONTENT}
	NO_SOURCE_PERMISSIONS
	NEWLINE_STYLE LF
)

if (MSVC)
	create_msvc_cxx_module_target(
		TARGET gemalto
		INCLUDE_DIRECTORIES
			${GEMALTO_VENDOR_CODE_CPP_DIR}
		LINK_LIBRARIES
			gemalto_superdog_api
	)
	add_library(gemalto::gemalto ALIAS gemalto)
else ()
	message(FATAL_ERROR "Gemalto wrapper requires C++20 module support")
endif ()

add_executable(gemalto_driver EXCLUDE_FROM_ALL ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp)
target_link_libraries(gemalto_driver
	PRIVATE
		gemalto::gemalto
)
