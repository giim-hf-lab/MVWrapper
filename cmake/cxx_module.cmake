function (create_msvc_cxx_module_target)
	list(APPEND options
		SOURCES_AS_PRIMARY_INTERFACE_DEPENDENCIES
	)
	list(APPEND one_value_keywords
		PRIMARY_INTERFACE
		TARGET
	)
	list(APPEND multi_value_keywords
		PRIMARY_INTERFACE_EXTRA_DEPENDENCIES
		COMPILE_DEFINITIONS
		COMPILE_OPTIONS
		INCLUDE_DIRECTORIES
		SYSTEM_INCLUDE_DIRECTORIES
		LINK_LIBRARIES
		SOURCES
	)
	cmake_parse_arguments(ARGS "${options}" "${one_value_keywords}" "${multi_value_keywords}" ${ARGN})

	set(MODULE_INTERFACE_UNIT_IFC_NAME "${ARGS_PRIMARY_INTERFACE}.ifc")

	cmake_path(
		APPEND CMAKE_CURRENT_SOURCE_DIR
			${ARGS_PRIMARY_INTERFACE}
		OUTPUT_VARIABLE MODULE_INTERFACE_UNIT
	)
	cmake_path(
		APPEND CMAKE_CURRENT_BINARY_DIR
			${MODULE_INTERFACE_UNIT_IFC_NAME}
		OUTPUT_VARIABLE MODULE_INTERFACE_UNIT_IFC
	)

	list(APPEND PRIMARY_INTERFACE_COMPILE_DEFINITIONS ${ARGS_COMPILE_DEFINITION})
	list(APPEND LINK_LIBRARIES_COMPILE_OPTIONS)
	list(APPEND LINK_LIBRARIES_INCLUDE_DIRECTORIES)
	list(APPEND LINK_LIBRARIES_SYSTEM_INCLUDE_DIRECTORIES)

	foreach (LINK_LIBRARY IN LISTS ARGS_LINK_LIBRARIES)
		if (TARGET ${LINK_LIBRARY})
			get_target_property(COMPILE_DEFINITIONS ${LINK_LIBRARY} INTERFACE_COMPILE_DEFINITIONS)
			if (NOT ${COMPILE_DEFINITIONS} STREQUAL "COMPILE_DEFINITIONS-NOTFOUND")
				list(APPEND PRIMARY_INTERFACE_COMPILE_DEFINITIONS ${COMPILE_DEFINITIONS})
			endif ()

			get_target_property(COMPILE_OPTIONS ${LINK_LIBRARY} INTERFACE_COMPILE_OPTIONS)
			if (NOT ${COMPILE_OPTIONS} STREQUAL "COMPILE_OPTIONS-NOTFOUND")
				list(APPEND LINK_LIBRARIES_COMPILE_OPTIONS ${COMPILE_OPTIONS})
			endif ()

			get_target_property(INCLUDE_DIRECTORIES ${LINK_LIBRARY} INTERFACE_INCLUDE_DIRECTORIES)
			if (NOT ${INCLUDE_DIRECTORIES} STREQUAL "INCLUDE_DIRECTORIES-NOTFOUND")
				list(APPEND LINK_LIBRARIES_INCLUDE_DIRECTORIES ${INCLUDE_DIRECTORIES})
			endif ()
			get_target_property(INCLUDE_DIRECTORIES ${LINK_LIBRARY} INTERFACE_SYSTEM_INCLUDE_DIRECTORIES)
			if (NOT ${INCLUDE_DIRECTORIES} STREQUAL "INCLUDE_DIRECTORIES-NOTFOUND")
				list(APPEND LINK_LIBRARIES_SYSTEM_INCLUDE_DIRECTORIES ${INCLUDE_DIRECTORIES})
			endif ()
		endif ()
	endforeach ()

	list(APPEND PRIMARY_INTERFACE_COMPILE_DEFINITIONS_DIRECTIVES)
	foreach (COMPILE_DEFINITION IN LISTS PRIMARY_INTERFACE_COMPILE_DEFINITIONS)
		string(REPLACE " " "=" COMPILE_DEFINITION "${COMPILE_DEFINITION}")
		if (NOT ${COMPILE_DEFINITION} MATCHES "^[/-]D")
			string(CONCAT COMPILE_DEFINITION "/D" "${COMPILE_DEFINITION}")
		endif ()
		list(APPEND PRIMARY_INTERFACE_COMPILE_DEFINITIONS_DIRECTIVES "${COMPILE_DEFINITION}")
	endforeach ()

	list(APPEND INCLUDE_DIRECTIVES)
	foreach (INCLUDE_DIRECTORY IN
		LISTS
			ARGS_INCLUDE_DIRECTORIES
			LINK_LIBRARIES_INCLUDE_DIRECTORIES
	)
		list(APPEND INCLUDE_DIRECTIVES "/I" ${INCLUDE_DIRECTORY})
	endforeach ()
	foreach (INCLUDE_DIRECTORY IN
		LISTS
			ARGS_SYSTEM_INCLUDE_DIRECTORIES
			LINK_LIBRARIES_SYSTEM_INCLUDE_DIRECTORIES
	)
		list(APPEND INCLUDE_DIRECTIVES "/external:I" ${INCLUDE_DIRECTORY})
	endforeach ()

	if (ARGS_SOURCES_AS_PRIMARY_INTERFACE_DEPENDENCIES)
		list(APPEND ARGS_PRIMARY_INTERFACE_EXTRA_DEPENDENCIES ${ARGS_SOURCES})
	endif ()

	string(REPLACE " " ";" CMAKE_CXX_FLAGS_LIST "${CMAKE_CXX_FLAGS}")
	string(TOUPPER "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE_UPPER)
	string(REPLACE " " ";" CMAKE_CXX_FLAGS_BUILD_TYPE_LIST "${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}}")

	set_property(
		SOURCE
			${MODULE_INTERFACE_UNIT}
			${ARGS_SOURCES}
		PROPERTY LANGUAGE CXX
	)

	add_custom_command(
		OUTPUT
			${MODULE_INTERFACE_UNIT_IFC}
		COMMAND
			${CMAKE_CXX_COMPILER}
			"/nologo"
			"/TP"
			${INCLUDE_DIRECTIVES}
			"/external:W0"
			${PRIMARY_INTERFACE_COMPILE_DEFINITIONS_DIRECTIVES}
			${CMAKE_CXX_FLAGS_LIST}
			${CMAKE_CXX_FLAGS_BUILD_TYPE_LIST}
			${LINK_LIBRARIES_COMPILE_OPTIONS}
			"/MD"
			${ARGS_COMPILE_OPTIONS}
			"/ifcOnly"
			"/ifcOutput" ${MODULE_INTERFACE_UNIT_IFC}
			"/interface"
			"/std:c++20"
			"/c"
			${MODULE_INTERFACE_UNIT}
		DEPENDS
			${MODULE_INTERFACE_UNIT}
			${ARGS_PRIMARY_INTERFACE_EXTRA_DEPENDENCIES}
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
		COMMENT "Force generating IFC of target ${ARGS_TARGET} beforehand"
		VERBATIM
		USES_TERMINAL
		COMMAND_EXPAND_LISTS
	)
	set_property(DIRECTORY
		APPEND
		PROPERTY ADDITIONAL_MAKE_CLEAN_FILES
			${MODULE_INTERFACE_UNIT_IFC}
	)
	add_custom_target(${ARGS_TARGET}_ifc
		DEPENDS
			${MODULE_INTERFACE_UNIT_IFC}
	)

	add_library(${ARGS_TARGET} STATIC EXCLUDE_FROM_ALL
		${MODULE_INTERFACE_UNIT}
		${ARGS_SOURCES}
	)
	add_dependencies(${ARGS_TARGET} ${ARGS_TARGET}_ifc)
	target_compile_definitions(${ARGS_TARGET}
		PRIVATE
			${ARGS_COMPILE_DEFINITION}
	)
	target_compile_options(${ARGS_TARGET}
		PUBLIC
			"/reference" ${MODULE_INTERFACE_UNIT_IFC}
		PRIVATE
			${ARGS_COMPILE_OPTIONS}
	)
	target_include_directories(${ARGS_TARGET}
		PRIVATE
			${ARGS_INCLUDE_DIRECTORIES}
	)
	target_include_directories(${ARGS_TARGET} SYSTEM
		PRIVATE
			${ARGS_SYSTEM_INCLUDE_DIRECTORIES}
	)
	target_link_libraries(${ARGS_TARGET}
		PRIVATE
			${ARGS_LINK_LIBRARIES}
	)
endfunction ()
